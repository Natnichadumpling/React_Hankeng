import React, { useState } from 'react';
import {
  View, Text, TouchableOpacity, StyleSheet, SafeAreaView,
  ScrollView, ImageBackground, Alert, Modal
} from 'react-native';

const Group4Screen = ({ navigation, route }) => {
  const [showImagePicker, setShowImagePicker] = useState(false);
  const [showMenuOptions, setShowMenuOptions] = useState(false);
  const [selectedImages, setSelectedImages] = useState([]);

  // params ‡∏à‡∏≤‡∏Å Group5Screen
  const { groupName: gNameFromNav, transferKey, from, to, amount } = route?.params || {};
  const groupName = gNameFromNav || route?.params?.groupName || '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤';

  const isSendDisabled = selectedImages.length === 0;

  const handleSendMessage = () => {
    if (selectedImages.length > 0) {
      // TODO: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î/‡∏™‡πà‡∏á‡πÑ‡∏õ backend ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      console.log('Sending images:', { transferKey, from, to, amount, files: selectedImages });
      Alert.alert('‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß', '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ô‡∏µ‡πâ');
      setSelectedImages([]);
    }
  };

  const goBack = () => navigation.goBack();

  const handleImageSelect = (imageType) => {
    // TODO: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URI ‡∏à‡∏≤‡∏Å image picker ‡∏à‡∏£‡∏¥‡∏á
    setShowImagePicker(false);
    setSelectedImages(prev => [...prev, imageType]);
    Alert.alert('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û', `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å${imageType}‡πÅ‡∏•‡πâ‡∏ß`);
  };

  const handleMenuOption = (option) => {
    setShowMenuOptions(false);
    Alert.alert('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å${option}‡πÅ‡∏•‡πâ‡∏ß`);
  };

  const removeImage = (index) => {
    const newImages = selectedImages.filter((_, i) => i !== index);
    setSelectedImages(newImages);
  };

  return (
    <ImageBackground
      // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      source={require('./assets/images/p1.png')}
      style={styles.container}
    >
      <SafeAreaView style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={goBack} style={styles.backButton}>
            <Text style={styles.backIcon}>‚Üê</Text>
          </TouchableOpacity>
          <Text style={styles.headerTitle}>{groupName}</Text>
          <TouchableOpacity style={styles.menuButton} onPress={() => Alert.alert('‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backend')}>
            <Text style={styles.menuText}>‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô</Text>
          </TouchableOpacity>
        </View>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
        {(from || to) && (
          <View style={styles.transferInfo}>
            <Text style={styles.transferInfoText}>
              ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {from} ‚Üí {to} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ø{Number(amount || 0).toFixed(2)}
            </Text>
          </View>
        )}

        {/* Messages / Empty */}
        <ScrollView style={styles.messagesContainer} showsVerticalScrollIndicator={false}>
          {selectedImages.length === 0 ? (
            <View style={styles.emptyChatContainer}>
              <Text style={styles.emptyChatText}>‡πÅ‡∏ô‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Text>
              <Text style={styles.emptyChatSubText}>‡∏Å‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ</Text>
            </View>
          ) : (
            <View style={styles.selectedImagesContainer}>
              <Text style={styles.selectedImagesTitle}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</Text>
              <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                {selectedImages.map((image, index) => (
                  <View key={index} style={styles.imagePreview}>
                    <Text style={styles.imagePreviewText}>{image}</Text>
                    <TouchableOpacity style={styles.removeImageButton} onPress={() => removeImage(index)}>
                      <Text style={styles.removeImageText}>√ó</Text>
                    </TouchableOpacity>
                  </View>
                ))}
              </ScrollView>
            </View>
          )}
        </ScrollView>

        {/* Input Area */}
        <View style={styles.inputContainer}>
          <TouchableOpacity style={styles.iconButton} onPress={() => setShowImagePicker(true)}>
            <Text style={styles.iconText}>üñºÔ∏è</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.iconButton} onPress={() => setShowMenuOptions(true)}>
            <Text style={styles.iconText}>‚ò∞</Text>
          </TouchableOpacity>

          <View style={{ flex: 1 }} />

          <TouchableOpacity
            style={[styles.sendButton, isSendDisabled && styles.sendButtonDisabled]}
            onPress={handleSendMessage}
            disabled={isSendDisabled}
          >
            <Text style={styles.sendIcon}>‚û§</Text>
          </TouchableOpacity>
        </View>

        {/* Image Picker Modal */}
        <Modal visible={showImagePicker} transparent animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</Text>

              <TouchableOpacity style={styles.modalOption} onPress={() => handleImageSelect('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà')}>
                <Text style={styles.modalOptionText}>üñºÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.modalCancelButton} onPress={() => setShowImagePicker(false)}>
                <Text style={styles.modalCancelText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>

        {/* Menu Options Modal */}
        <Modal visible={showMenuOptions} transparent animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠</Text>

              <TouchableOpacity style={styles.modalOption} onPress={() => handleMenuOption('‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤')}>
                <Text style={styles.modalOptionText}>üåê ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.modalOption} onPress={() => handleMenuOption('‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô')}>
                <Text style={styles.modalOptionText}>üí± ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.modalCancelButton} onPress={() => setShowMenuOptions(false)}>
                <Text style={styles.modalCancelText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </SafeAreaView>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },

  header: {
    flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between',
    paddingHorizontal: 15, paddingVertical: 15,
    backgroundColor: 'rgba(255,255,255,0.9)', borderBottomWidth: 1, borderBottomColor: '#e0e0e0',
  },
  backButton: { padding: 5 },
  backIcon: { fontSize: 24, color: '#333' },
  headerTitle: { fontSize: 18, fontWeight: 'bold', color: '#333' },
  menuButton: { paddingHorizontal: 10, paddingVertical: 5, backgroundColor: '#e8f4fd', borderRadius: 15 },
  menuText: { fontSize: 14, color: '#4a90e2' },

  transferInfo: { paddingHorizontal: 15, paddingVertical: 8, backgroundColor: '#fff8e1' },
  transferInfoText: { color: '#6d4c41', fontSize: 13 },

  messagesContainer: { flex: 1, paddingHorizontal: 15, paddingVertical: 20 },
  emptyChatContainer: { flex: 1, alignItems: 'center', justifyContent: 'center', marginTop: 60 },
  emptyChatText: { fontSize: 18, fontWeight: 'bold', color: '#666', marginBottom: 10 },
  emptyChatSubText: { fontSize: 14, color: '#999', textAlign: 'center' },

  selectedImagesContainer: { marginTop: 10, padding: 15, backgroundColor: 'rgba(255,255,255,0.85)', borderRadius: 10 },
  selectedImagesTitle: { fontSize: 16, fontWeight: 'bold', marginBottom: 10, color: '#333' },
  imagePreview: { backgroundColor: '#b3e5fc', padding: 10, borderRadius: 8, marginRight: 10, position: 'relative', minWidth: 100, alignItems: 'center' },
  imagePreviewText: { fontSize: 14, color: '#333' },
  removeImageButton: { position: 'absolute', top: -5, right: -5, backgroundColor: '#ff4444', borderRadius: 10, width: 20, height: 20, alignItems: 'center', justifyContent: 'center' },
  removeImageText: { color: '#fff', fontSize: 12, fontWeight: 'bold' },

  inputContainer: {
    flexDirection: 'row', alignItems: 'center', paddingHorizontal: 15, paddingVertical: 10,
    backgroundColor: 'rgba(255,255,255,0.95)', borderTopWidth: 1, borderTopColor: '#e0e0e0',
  },
  iconButton: { padding: 8, marginRight: 8 },
  iconText: { fontSize: 22, color: '#666' },
  sendButton: { backgroundColor: '#4a90e2', borderRadius: 20, paddingHorizontal: 14, paddingVertical: 10, alignItems: 'center', justifyContent: 'center' },
  sendButtonDisabled: { opacity: 0.5 },
  sendIcon: { fontSize: 18, color: '#fff' },

  modalContainer: { flex: 1, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'flex-end' },
  modalContent: { backgroundColor: '#fff', borderTopLeftRadius: 20, borderTopRightRadius: 20, paddingHorizontal: 20, paddingVertical: 30 },
  modalTitle: { fontSize: 20, fontWeight: 'bold', textAlign: 'center', marginBottom: 20, color: '#333' },
  modalOption: { paddingVertical: 15, borderBottomWidth: 1, borderBottomColor: '#f0f0f0' },
  modalOptionText: { fontSize: 16, color: '#333' },
  modalCancelButton: { paddingVertical: 15, marginTop: 10, backgroundColor: '#f8f8f8', borderRadius: 10, alignItems: 'center' },
  modalCancelText: { fontSize: 16, color: '#666', fontWeight: 'bold' },
});

export default Group4Screen;
